0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@3.10.10
3 info using node@v6.10.3
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: 'C:\\GIT\\angular-hotkeys',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory C:\Users\ebullion.DOCTORNETWORK\AppData\Roaming\npm-cache\angular-hotkeys\1.7.1\package.tgz not in flight; packing
9 verbose correctMkdir C:\Users\ebullion.DOCTORNETWORK\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
10 info lifecycle angular-hotkeys@1.7.1~prepublish: angular-hotkeys@1.7.1
11 silly lifecycle angular-hotkeys@1.7.1~prepublish: no script for prepublish, continuing
12 verbose tar pack [ 'C:\\Users\\ebullion.DOCTORNETWORK\\AppData\\Roaming\\npm-cache\\angular-hotkeys\\1.7.1\\package.tgz',
12 verbose tar pack   'C:\\GIT\\angular-hotkeys' ]
13 verbose tarball C:\Users\ebullion.DOCTORNETWORK\AppData\Roaming\npm-cache\angular-hotkeys\1.7.1\package.tgz
14 verbose folder C:\GIT\angular-hotkeys
15 verbose addLocalTarball adding from inside cache C:\Users\ebullion.DOCTORNETWORK\AppData\Roaming\npm-cache\angular-hotkeys\1.7.1\package.tgz
16 verbose correctMkdir C:\Users\ebullion.DOCTORNETWORK\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
17 silly cache afterAdd angular-hotkeys@1.7.1
18 verbose afterAdd C:\Users\ebullion.DOCTORNETWORK\AppData\Roaming\npm-cache\angular-hotkeys\1.7.1\package\package.json not in flight; writing
19 verbose correctMkdir C:\Users\ebullion.DOCTORNETWORK\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
20 verbose afterAdd C:\Users\ebullion.DOCTORNETWORK\AppData\Roaming\npm-cache\angular-hotkeys\1.7.1\package\package.json written
21 silly publish { name: 'angular-hotkeys',
21 silly publish   author: { name: 'Wes Cruver / Eric Bullion' },
21 silly publish   version: '1.7.1',
21 silly publish   license: 'MIT',
21 silly publish   description: 'Automatic keyboard shortcuts for your Angular Apps',
21 silly publish   homepage: 'https://ebullion.github.io/angular-hotkeys',
21 silly publish   main: 'build/hotkeys.js',
21 silly publish   keywords: [ 'angular', 'angularjs', 'keyboard', 'shortcut', 'hotkeys' ],
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/ebullion/angular-hotkeys.git' },
21 silly publish   bugs: { url: 'https://github.com/ebullion/angular-hotkeys/issues' },
21 silly publish   scripts: { test: 'node_modules/karma/bin/karma start test/karma.conf.js' },
21 silly publish   devDependencies:
21 silly publish    { grunt: '~0.4.1',
21 silly publish      'grunt-contrib-concat': '^0.5.1',
21 silly publish      'grunt-contrib-cssmin': '^0.12.3',
21 silly publish      'grunt-contrib-jshint': '~0.6.4',
21 silly publish      'grunt-contrib-uglify': '^0.9.1',
21 silly publish      'grunt-contrib-watch': '^0.6.1',
21 silly publish      'grunt-karma': '^0.11.0',
21 silly publish      'grunt-ng-annotate': '^0.3.0',
21 silly publish      karma: '~0.12.0',
21 silly publish      'karma-chrome-launcher': '~0.1.0',
21 silly publish      'karma-coffee-preprocessor': '~0.1.0',
21 silly publish      'karma-coverage': '~0.1.0',
21 silly publish      'karma-firefox-launcher': '~0.1.0',
21 silly publish      'karma-html2js-preprocessor': '~0.1.0',
21 silly publish      'karma-jasmine': '~0.1.3',
21 silly publish      'karma-phantomjs-launcher': '^0.2.0',
21 silly publish      'karma-script-launcher': '~0.1.0' },
21 silly publish   readme: 'angular-hotkeys\r\n================\r\nConfiguration-centric keyboard shortcuts for your Angular apps.\r\n\r\n[![Coverage Status](https://coveralls.io/repos/chieffancypants/angular-hotkeys/badge.png?branch=master)](https://coveralls.io/r/chieffancypants/angular-hotkeys?branch=master)\r\n![Build Status](https://magnum-ci.com/status/89743485de3e7311dfc9793e26f39b41.png)\r\n\r\n**Requirements**: Angular 1.2+\r\n\r\n### Features:\r\n- Define hotkeys on an entire route, automatically binding and unbinding them as you navigate\r\n- Automatic listing of shortcuts when users hit the `?` key\r\n- Super duper unit tests\r\n\r\n\r\n### Installation:\r\n\r\n#### via bower:\r\n\r\n```\r\n$ bower install chieffancypants/angular-hotkeys --save\r\n```\r\n\r\n#### via npm:\r\n\r\n```\r\n$ npm install angular-hotkeys --save\r\n```\r\n\r\n\r\n*please use either the minified or unminified file in the `build` directory*\r\n\r\n### Why I made this:\r\nOther projects out there rely too heavily on HTML markup for keyboard shortcuts.  For example:\r\n\r\n```html\r\n<div class="player">\r\n  <div class="playPause-btn" hotkey="{space: playPause}"></div>\r\n  <div class="mute-btn" hotkey="{\'ctrl+down\': mute}"></div>\r\n</div>\r\n```\r\n\r\nWhile this is a great approach for many Angular apps, some applications do not have a 1 to 1 relationship between DOM elements and controller methods.  In my case, many methods on the controller were **only** accessible through the keyboard.\r\n\r\nAdditionally, this only allows you to pass a function reference, you can\'t pass arguments to the function you intend to call. So instead of simply calling `seek(currentTime + 30)` and `seek(currentTime + 60)`,  I needed to create a ton of helper functions on the scope (such as `forward30` and `forward60`), and litter my HTML like this:\r\n\r\n```html\r\n<div class="player" hotkey="{space: playPause,\r\n                              \'alt+right\': forward30,\r\n                              \'ctrl+right\': forward60,\r\n                              \'left\': back30,\r\n                              \'ctrl+left\': back60,\r\n                              up: volumeUp,\r\n                              down: volumeDown,\r\n                              \'ctrl+down\': mute,\r\n                              \'ctrl+up\': unmute,\r\n                              f: fullscreen,\r\n                              h: showHelp}">\r\n  <div class="playPause-btn"></div>\r\n  <div class="mute-btn"></div>\r\n</div>\r\n\r\n```\r\n\r\nWith a few dozen shortcuts, this left the DOM really messy, and with multiple views and directive templates, it was next to impossible to remember where all the different shortcuts were.  This became a maintenance nightmare.\r\n\r\n\r\n### Usage:\r\nYou can either define hotkeys in your Controller, or in your Route configuration (or both).  To start, though, require the lib as a dependency for your angular app:\r\n\r\n```js\r\nangular.module(\'myApp\', [\'ngRoute\', \'cfp.hotkeys\']);\r\n```\r\n\r\nBehind the scenes, I\'m using the [Mousetrap](https://github.com/ccampbell/mousetrap) library to manage the key bindings.  Check out the docs there for more information on what kind of key combinations can be used.  This library is included in the files from the `build` directory, so there is no need to install and include Mousetrap separately.\r\n\r\n**Update:** [A YouTube video tutorial was created for this project](https://www.youtube.com/watch?v=silr0L7rJOY). Thanks guys!\r\n\r\n\r\n#### Binding hotkeys in controllers:\r\nIt is important to note that by default, hotkeys bound using the `hotkeys.add()`\r\nmethod are persistent, meaning they will continue to exist through route\r\nchanges, DOM manipulation, or anything else.\r\n\r\nHowever, it is possible to bind the hotkey to a particular scope, and when that\r\nscope is destroyed, the hotkey is automatically removed. This should be\r\nconsidered the best practice when binding hotkeys from a controller. For this\r\nusage example, see the `hotkeys.bindTo()` method below:\r\n\r\n```js\r\nangular.module(\'myApp\').controller(\'NavbarCtrl\', function($scope, hotkeys) {\r\n  $scope.volume = 5;\r\n\r\n  // You can pass it an object.  This hotkey will not be unbound unless manually removed\r\n  // using the hotkeys.del() method\r\n  hotkeys.add({\r\n    combo: \'ctrl+up\',\r\n    description: \'This one goes to 11\',\r\n    callback: function() {\r\n      $scope.volume += 1;\r\n    }\r\n  });\r\n\r\n  // when you bind it to the controller\'s scope, it will automatically unbind\r\n  // the hotkey when the scope is destroyed (due to ng-if or something that changes the DOM)\r\n  hotkeys.bindTo($scope)\r\n    .add({\r\n      combo: \'w\',\r\n      description: \'blah blah\',\r\n      callback: function() {}\r\n    })\r\n    // you can chain these methods for ease of use:\r\n    .add ({...});\r\n\r\n});\r\n```\r\n\r\n#### Binding hotkeys in routes:\r\nYou can also define hotkeys on an entire route, and this lib will bind and unbind them as you navigate the app.\r\n\r\n```js\r\nangular.module(\'myApp\').config(function ($routeProvider) {\r\n  $routeProvider.when(\'/\', {\r\n    controller: \'RestaurantsController\',\r\n    templateUrl: \'views/restaurants.html\',\r\n    hotkeys: [\r\n      [\'p\', \'Sort by price\', \'sort(price)\']\r\n    ]\r\n  });\r\n});\r\n```\r\n\r\n#### Binding hotkeys in directives:\r\nLastly, even though binding hotkeys in your templates/html tends to be a bad idea, it can be super useful for simple shortcuts.  Think along the lines of a modal directive where you simply want to bind to the escape key or something equally simple.  Accomplishing this within a controller is too much overhead, and it may lead to code-reuse.\r\n\r\nExample of how directive-based hotkeys works:\r\n\r\n```html\r\n<modal title="Modal Title" hotkey="{esc: close}">\r\n```\r\n\r\n#### Cheatsheet\r\n\r\nA cheatsheet is created automatically for you, showing which hotkeys are available for the current route, along with a description as to what it does. The default binding to show the cheatsheet is `?`. Be sure to include the `build/hotkeys.css` stylesheet. [Cheatsheet demo](http://chieffancypants.github.io/angular-hotkeys/#features)\r\n\r\n**Disable the cheatsheet:**\r\n\r\nDisabling the cheatsheet can be accomplished by configuring the `hotkeysProvider`:\r\n\r\n```js\r\nangular.module(\'myApp\', [\'cfp.hotkeys\'])\r\n  .config(function(hotkeysProvider) {\r\n    hotkeysProvider.includeCheatSheet = false;\r\n  })\r\n```\r\n\r\n### Configuration\r\n\r\n**Disable ngRoute integration:**\r\n\r\nTo prevent listening for $routeChangeSuccess events use `hotkeysProvider`.\r\nThis option defaults to false if ngRoute module is not loaded:\r\n\r\n```js\r\nangular.module(\'myApp\', [\'cfp.hotkeys\'])\r\n  .config(function(hotkeysProvider) {\r\n    hotkeysProvider.useNgRoute = false;\r\n  })\r\n```\r\n\r\n**Cheatsheet template:**\r\n\r\n```js\r\nangular.module(\'myApp\', [\'cfp.hotkeys\'])\r\n  .config(function(hotkeysProvider) {\r\n    hotkeysProvider.template = \'<div class="my-own-cheatsheet">...</div>\';\r\n  })\r\n```\r\n\r\n**Header and footer:**\r\n\r\nYou can specify a custom header and footer for the cheatsheet.  Both are HTML, and if the header is set it will override the normal title.\r\n\r\n```js\r\nangular.module(\'myApp\', [\'cfp.hotkeys\'])\r\n  .config(function(hotkeysProvider) {\r\n    hotkeysProvider.templateHeader = \'<div class="my-own-header">...</div>\';\r\n    hotkeysProvider.templateFooter = \'<div class="my-own-footer">...</div>\';\r\n  })\r\n```\r\n\r\n### API\r\n\r\n#### hotkeys.add(object)\r\n`object`: An object with the following parameters:\r\n- `combo`: They keyboard combo (shortcut) you want to bind to\r\n- `description`: [OPTIONAL] The description for what the combo does and is only used for the Cheat Sheet.  If it is not supplied, it will not show up, and in effect, allows you to have unlisted hotkeys.\r\n- `callback`: The function to execute when the key(s) are pressed.  Passes along two arguments, `event` and `hotkey`\r\n- `action`: [OPTIONAL] The type of event to listen for, such as `keypress`, `keydown` or `keyup`. Usage of this parameter is discouraged as the underlying library will pick the most suitable option automatically. This should only be necessary in advanced situations.\r\n- `allowIn`: [OPTIONAL] an array of tag names to allow this combo in (\'INPUT\', \'SELECT\', and/or \'TEXTAREA\')\r\n\r\n```js\r\nhotkeys.add({\r\n  combo: \'ctrl+w\',\r\n  description: \'Description goes here\',\r\n  callback: function(event, hotkey) {\r\n    event.preventDefault();\r\n  }\r\n});\r\n\r\n// this hotkey will not show up on the cheat sheet:\r\nhotkeys.add({\r\n  combo: \'ctrl+x\',\r\n  callback: function(event, hotkey) {...}\r\n});\r\n```\r\n\r\n#### hotkeys.get(key)\r\nReturns the Hotkey object\r\n\r\n```js\r\nhotkeys.get(\'ctrl+w\');\r\n// -> Hotkey { combo: [\'ctrl+w\'], description: \'Description goes here\', callback: function (event, hotkey) }\r\n```\r\n\r\n#### hotkeys.del(key)\r\nRemoves and unbinds a hotkey\r\n\r\n```js\r\nhotkeys.del(\'ctrl+w\');\r\n```\r\n\r\n### Allowing hotkeys in form elements\r\nBy default, Mousetrap prevents hotkey callbacks from firing when their event originates from an `input`, `select`, or `textarea` element. To enable hotkeys in these elements, specify them in the `allowIn` parameter:\r\n```js\r\nhotkeys.add({\r\n  combo: \'ctrl+w\',\r\n  description: \'Description goes here\',\r\n  allowIn: [\'INPUT\', \'SELECT\', \'TEXTAREA\'],\r\n  callback: function(event, hotkey) {\r\n    event.preventDefault();\r\n  }\r\n});\r\n```\r\n\r\n## Credits:\r\n\r\nMuchas gracias to Craig Campbell for his [Mousetrap](https://github.com/ccampbell/mousetrap) library, which provides the underlying library for handling keyboard shortcuts.\r\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'a286820fd14c1605f6ff9c222f2a82dae28d9807',
21 silly publish   _id: 'angular-hotkeys@1.7.1',
21 silly publish   _shasum: '9c17fd8f10d8fdf6ce57e3b63ddb5b1d7ee0a0b9',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name angular-hotkeys
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'angular-hotkeys',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'angular-hotkeys',
26 silly mapToRegistry   name: 'angular-hotkeys',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/angular-hotkeys
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading C:\Users\ebullion.DOCTORNETWORK\AppData\Roaming\npm-cache\angular-hotkeys\1.7.1\package.tgz
30 verbose request uri https://registry.npmjs.org/angular-hotkeys
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 11:38:54 AM
33 verbose request using bearer token for auth
34 verbose request id a2d91bc08e72ad09
35 http request PUT https://registry.npmjs.org/angular-hotkeys
36 http 403 https://registry.npmjs.org/angular-hotkeys
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '109',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Mon, 06 Nov 2017 17:38:54 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-dfw18630-DFW',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1509989934.486728,VS0,VE453',
37 verbose headers   vary: 'Accept-Encoding, Accept' }
38 verbose request invalidating C:\Users\ebullion.DOCTORNETWORK\AppData\Roaming\npm-cache\registry.npmjs.org\angular-hotkeys on PUT
39 error publish Failed PUT 403
40 verbose stack Error: You do not have permission to publish "angular-hotkeys". Are you logged in as the correct user? : angular-hotkeys
40 verbose stack     at makeError (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:290:14)
40 verbose stack     at Request._callback (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:210:14)
40 verbose stack     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1048:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:969:12)
41 verbose statusCode 403
42 verbose pkgid angular-hotkeys
43 verbose cwd C:\GIT\angular-hotkeys
44 error Windows_NT 10.0.10240
45 error argv "C:\\Program Files\\nodejs\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error node v6.10.3
47 error npm  v3.10.10
48 error code E403
49 error You do not have permission to publish "angular-hotkeys". Are you logged in as the correct user? : angular-hotkeys
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
